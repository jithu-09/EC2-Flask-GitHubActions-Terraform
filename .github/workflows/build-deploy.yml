name: build and push docker image to ECR

on:
  push:
    branches:
      - main
    paths:
      - 'Src/*'       # any changes in Src directory 
      - 'Dockerfile'  # any changes in Dockerfile
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  AWS_EC2: "j09-ec2-instance"
  ECR_REPO: "docker-flask"
  GIT_SHA: ${{ github.sha }}


jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            - name: setup aws credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - name: Login to ECR
              run: |
                aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            - name: Build Docker image
              run: |
                docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }} .
            - name: Push Docker image to ECR
              run: |
                docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}
            - name: Verify Docker image exists in ECR
              run: |
                aws ecr describe-images --repository-name ${{ env.ECR_REPO }} --image-ids imageTag=${{ env.GIT_SHA }}
                echo "Image is in ECR"
    
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2
           # - name: Install AWS CLI
            #  run: |
             #   sudo apt-get update
              #  sudo apt-get install -y awscli
            - name: setup aws credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - name: get public ip and sha
              run: |
                echo "PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.AWS_EC2 }}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> "$GITHUB_ENV"
                echo "SHA: $GITHUB_SHA"
            - name: Execute Remote SSH Commands using SSH Key
              uses: appleboy/ssh-action@v1.0.3
              with:
                host: ${{ env.PUBLIC_IP }}
                username: ubuntu
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                port: 22
                script: |
                    sudo apt-get install unzip
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
                
                    # Cleans up existing containers and images, for all
                    echo "Cleaning up the VM"
                    docker rm -f $(docker ps -aq) || true
                    docker rmi -f $(docker images -q) || true

                    # Logs in to ECR and runs the Docker container
                    echo "Running container"
                    aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
                    docker run -td -p 80:5000 --name flask-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}
                                                               
